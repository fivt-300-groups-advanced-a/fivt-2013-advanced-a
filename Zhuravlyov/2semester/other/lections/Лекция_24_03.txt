Мы в прошлый раз научились за О(Е) искать компоненты сильной связности.

Решим задачу.
Дан ориентированный граф. Есть 2 вершины S и T. Найти все рёбра, которые могут лежать на пути из S в T.
Это значит, что можно добраться из S до u, потом переходим из u в v и из v в T.
Достаточно: запустить dfs из S и dfs в транспонированном графе из T. Далее рассмотрим, что u достижима из S, а v достижима из T.
А теперь мы хотим ловить преступника.
Теперь мы хотим найти такое ребро, через которое обязан пройти путь из S в T.
Можно, конечно, просто удалять ребро и проверять, ну за E^2, не норм-так.
Давайте чуть ускорим.
Утверждается, что если мы найдём произвольный путь из S в T, то рёбра на этом пути - кандидаты на то, чтобы быть рёбрам таких рёбер V, так что получаем O(E+VE)
Заметим, что ребро нам не подходит если есть некий обходной путь: он начинается в какой-то момент из вершины X и заканчивается в вершине Y - SXYT обходит ребро uv.
Если такого куска XY нету, то ребро uv будет искомым.
Мы получаем возле XY нечно похожее на неориентированный цикл, но в ориентированном графе он циклом не является.
Так давайте развернём все ребра на пути из S в T(в отмеченном пути). В полученном графе проверим, лежит ли ребро uv в цикле или нет. 
Если лежит - значит его можно обойти. Соответственно, достаточно посмотреть, что u и v лежат в одной разных компонентах сильной связности нового графа.
Это соображние решает задачу. Итого, решение за O(E+E+V) = O(V+E)
А как сделать то же самое с вершинами? Так сказать, ориентированные точки соченения.
Можно использовать классический приём: раздвоение вершин.
Пусть есть вершина, в неё входит сколько-то рёбер и выходит сколько-то рёбер. Просто сделаем из вершины 2: вход и выход. Все входящие рёбра пустим во вход, 
а исходящие - в выход. Проведём также ребро из входа в выход.
Теперь, если путь в графе проходит через вершину v, он проходит через специальное ребро, соответствующее этой вершине.
Таким образом, свели задачу про вершины к задаче про рёбра.

Давайте займёмся логикой. о_О
Пусть у нас есть какое-то количество переменных: n штук.
Пусть есть уравнение 2-CNF. 2-CNF - конъюнкция дизъюнктов, где в каждом дизъюнкте всего 2 переменных.
(x|y)&(a|b)&(b|x) = 1 - хочется найти решение.
^ может стоять и отрицание при какой-либо из переменных.
Можно считать, что дизъюнктов по одной переменной нет - понятно, что от них просто избавиться.
Давайте заменим все | на ->
Понятно, что x|y <=> !x->y <=> !y->x
Вместо x|y запишем (!x->y) && (!y->x)
Чем замечательно ->? Оно похоже на стрелочку в графе!
Давайте каждой переменной поставим в соответствие 2 вершины в графе x и !x.
Тогда получим граф с V = 2*n
Рёбра в графе нарисуем соответственно полученным импликациям.
Рёбер в некотором смысле 2*m, где - m - изначальное количество скобок.
Когда формула неразрешима?
Если получилось так, что x->!x & !x -> x, то решение не существует.
Так давайте найдём компоненты сильной связности. И если x и !x лежат в одной компоненте сильной свзяности, то ответа нет.
А если ответ есть, то давайте его конструктивно получать.
Давайте рассмотрим конденсацию графа. Тогда в одной вершине все одно-валентные формулы обязаны принимать одно и то же значение(т.к. все связаны в цикле)
Рассмотрим стоковую компоненту сильной связности. Присвоим все значения в ней истине.
Пусть у нас в стоковой компоненте a, !b, c. Давайте покажем, что !a, b, !c лежат в одной КСС. Ну действительно, граф же симметрично строился.
Итак, !a, b, !c лежат в одной КСС и вершина этой КСС в конденсации получает значение лжи. Более того, эта вершина истоковая(так как исходная стоковая)
На другие КСС вершина повлиять не может. В уме полученную пару КСС удаляем и продолжаем наш процесс. Конструктивно получаем ответ.
Все решения, к сожалению, получить сложнее.
Весь наш алгоритм работает за O(n+m)

Перейдём к неориентированным графам
У них есть компонента связноти - это та же компонента сильной связности в ориентированном графе.
Есть понятие моста - ребро, при удалении которого, количество КС увеличиватся.
Есть точка сочленения - вершина, при удалении которой, количество КС увеличивается.
Как правило, мосты и точки сочленения инцидентны, но есть исключения в случае висячих вершин.
Граф называется вершинно-двусвязным, если в нём нет точек сочленения.
Граф называется рёберно-двусвязным, если в нём нет мостов.
Если граф вершинно-двусвязный, то между любой парой вершин существует 2 пути, не пересекающихся по вершинам, кроме начала и конца.
Если граф рёбрено-двусвязный, то между любой парой вершин существует 2 пути, не пересекающихся по рёбрам.
Есть вершинно-простой и рёберно-простой циклы - понятно, что такое.
Переходим к двум понятиям.
Рёберная компонента двусвязности - наибольшее по включению множество вершин, что в сужении графа на это множество вершин нет мостов.
Компоненты вершинной двусвязности - наибольше по включению множество рёбер, что в индуцированном им подграфе нет точек сочленения.

Ну давайте искать мосты \ точки сочленения
Берём ребро, удаляем его, и смотрим увеличения КС - O(E^2)
Давайте запустим обход в глубину и построим дерево обхода в глубину - рёбра из серых в белые. 
Все рёбра, которые не входят в рёбра остовного дерева, обязательно лежат в цикле. - О(VE)
Ну, давайте что-нибудь умное.
Давайте попробуем понять, когда ребро остовного дерева является мостом: это происходит, если в его поддереве не сущетсвует вершины, которая ведёт выше.
Ну, с точками сочленения то же самое.
Вершина v является точкой сочленения, если хотя бы одно поддерево после удаления отвалится. Это произойдёт, если в поддереве v есть обратное ребро в предка v.
Давайте посчитаем f(v) - наименьшее время входа, в которое можно попасть по белым вершинам из вершины v.
В неориентированном графе такой путь - это набор рёбер вниз и резкий пыжок наверх.
Итак f(v) вычисляется, так:
f(v) = tin(v)
f(v) = min(f(v), tin(u)) - если u это чёрная вершина
f(v) = min(f(v), f(u)) - если u это белая вершина
Тогда v является точкой сочленения, если существует такое u, что f(u)>=tin(v)
У корня есть особая специфика - для него любая вершина, которая является сыном, удовлетворяет этому условию.
Если у корня один ребёнок, то корень не является точкой сочленения, если более одного ребёнка - точно является точкой сочленения.
Ребро p->v вляется мостом, если f(v)==tin(v)
Ребро v->u является мостом, если f(u)>tin(v)

А как находить сами компоненты?
Да ровно также, как КСС в алгоритме Тарьяна.
Мы складываем все рёбра, которые проходим, в стек. То же самое с вершинами.
Если в какой-то момент мы находимся в вершине v и заходим в вершину u и в конце обработки оказалось, что v->u мост, тогда в стеке - компонента рёберной двусвязности
То же с точками сочленения: если какая-то вершина оказалась точкой сочленения, то в стеке лежит компонента вершинной двусвязности.