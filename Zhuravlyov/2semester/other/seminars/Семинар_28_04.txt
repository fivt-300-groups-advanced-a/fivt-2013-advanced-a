Как разделять на файлы в питоне
fivt/__init__.py - файл, который инициализирует модуль
Теперь если у вас есть a.py и b.py
from . import a - подключаем файл a
xyz/__init__.py
from xyz import z
Если у вас внутри xyz есть zyx, то в zyx должен лежать __init__.py
Если в __init__.py у вас объявлена f, то вы можете написать 
from xyz import f
import * - импортит все функции по умолчанию

Про задачу
У нас есть интерфейс верхнего уровня
dijkstra(graph x)
Неплохо было бы в графе уметь переводить рёбра в вес (вес одного ребра)
Нужно ещё иметь функтор, который из веса пути и веса ребра получает вес пути
Вообще весом пути может быть всё что угодно
Хотя фактически можно просто обойтись одним функтором вес пути + ребро, и не заморачиваясь с сущностью "вес ребра"
Ещё нужно уметь сравнивать веса путей.
Можно использовать оператор <, а можно использовать компаратор, даже лучше использовать компаратор, т.к. знак < он один только для одного пути
Для веса пути ещё должно быть стартовое значение
А куда это всё распихивать?
Граф может быть списком списков, а может быть просто структурой A, такой что
A[v] - список рёбер вершины v. Это может быть список или dict.
dijkstra(graph, vertex, start_wp, cmp_swp = lambda w1, w2: w1 < w2, sum_pe = (lamda wp, e: wp + e.weight), destination_by_edge = lambda e: e.dest )
Параметр, которому дали дефолтное значение - именованный параметр

Пусть у нас теперь есть граф, который является списком списков
[C {next, w}]
Вызов: dijkstra(9, 13, 0, sum_pe = lambda wp, e: wp + e.w, destination = lambda e: e.next)

Не стесняйтесь добавлять новые параметры
Можно добавить weight_by_edge

Нам нужно будет это всё протестировать.