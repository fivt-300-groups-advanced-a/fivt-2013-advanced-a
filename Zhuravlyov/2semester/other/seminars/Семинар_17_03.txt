На семинарах нам нужно понять зачем нужно наследование, и вообще ООП. Оно зиждется на трёх слонах.

Инкапсуляция - это упаковка каких-то данных в одну большую сущность. Например, класс. 
Функция может быть инкапсуляцией. Например, если она коннектится к базе денных, берё данные и дисконнектится.
Веб-сервер или SQL-сервер может служить примером инкапсуляции. Мы не меняем код, мы только пишем названием СУБД.

Ещё есть полиморфизм.
Пусть у нас есть функция F, она принимает параметр Х. Хочется, чтобы Х был не конкретным объектом, а любым объектом.
Doc Typing- есть какая-то договорённость, о том, каким имено свойствам должет удовлетворять этот объект.
У современных языков программирования Doc Typing является основным инструментом. Питон, например, вовсе не типизирован.
Полиморфизм можно понимать и в более мощном режиме. 
Например, база данных. С одной стороны это просто объект, но это может быть и целый класс из множества компьютеров. 
И нам абсолютно неважно, каким образом это реализовано. Она поддерживает API - какие запросы она может реализовывать.
Полиморфизм в большом смысле - это когда одну вещь можно заменить на другую, имеющую тот же самый интерфейс.

Наследование
Абсолютно бессмысленная вещь. Ну правда, она очень узкая. Оно помогает нам реализовать, по сути, полиморфизм. Само по себе оно не нужно.
Даже не помогает толком реализовать инкапсуляцию.

В языке С++ есть 2 типа реализации полиморфизма:
1) Шаблонный полиморфизм
2) Наследование

Шаблоны очень хороши тем, что они помогают без замедления частных частей реализовывать программы или функции.
В наследовании это не так. Можно внезапно понять, что у вас в 4 раза больше жрёт времени и в 5 раз больше памяти. Ну прям как Windows.
Так зачем нужно наследование?
Сегодня у нас battle: template vs ООП
template:
+) Скорость, память
-) Время компиляции
-) Менее строгая типизация
-) Не получается хранить в контейнерах
ООП:
-) Скорость, память
+) Время компиляции
+) Более строгая типизация
+) Хранение в котейнерах

Если у невиртуального класса есть фукнция, то компилятор не поймёт, что эта фукнция реализована как-то по-другому и просто подставит её.
Если же метод виртуальный, то полиморфизм произойдёт засчёт наследования. Можно создать объект класса наследника и вызвать фукнцию от него.
Class A{
    virtual int x() {};
    int A,B;
    double X, Y;
}
class B: public A{
    override int x() {} // Лучше написать override, чтобы точно быть увереным, чтобы убедить себя в переопределении.
}
Плохо то, что для каждого виртуального класса строится отдельная таблица виртуальных функций.
Оверхед на каждый объект - 8 байт.
Вообще создавать невиртуальный объект достаточно позитивно. Java, например, такой возможности лишена.

А как вообще происходит вызов вирт. фукнции?
Когда передают виртуальный класс, компилятор не знает, какой именно объект ему передали, с какой именно фукнцией.
Он не сможет нужную фукцию соптимизировать. Ему ведь, реально прийдётся вызывать функцию. Со стеком, адресом возврата и прочими делами.
Прийдётся найти функцию и вызвать её.

Но компилятор он тоже не глупый.
for (int i=0;i<1000000000;++i) a.x();
Если объект не меняется, то он не будет всегда искать функцию в таблице виртуальных функций. Он запомнит её. 
Но заинлайнить её он точно не сможет. Здесь у него шансов нет.

Ну и что? ООП отстой? Да нет же!

У ООП есть хороший плюс: время компиляции.
template вообще может компилировать программу бесконечно долго:
template <int N> class V {
    typedef V<N-1> x; 
}
V<1000000000> x; // promlems?
Если сделать узкую специализацию:
template<> class V<0> {};
То мы всего навсего создадим 1000000000 классов, если компилятору не станет плохо.

Ну это всё фантазии, а в жизни-то всё как?
Шаблон можно поместить только в один .h файл. А значит в каждом .сс файле он будет компилироваться независимо.
Компилятор конечно может соптимизировать работу. Но многие системы компилируют все .cc файлы отдельно, или даже на нескольких компьютерах. 
С виртуальными фукнциями: можно вообще её не реализовывать в h - файле: это можно сделать в cpp файле int class A::f() {}

Ну, кроме того, если у вас что-то реализовано шаблонами, то вы уже не можете остановится! Вы будете и будете писать шаблоны!
Ну правда, пока вы не закончите инкапсуляцию какой-то библиотеки, вы не сможете отказаться от шаблонов.
В стандартной библиотеке есть наследование во входных и выходных потоках. Есть виртуальный метод read.
Так что делают виртуальные методы в шаблонной библиотеке?
read читает некоторый блок, а не один символ. Таким образом, виртуальный метод дожен делать какой-то большой кусок действий.

Чем ещё плохи шаблоны?
Если вы передаёте какой-то тип Х, который не соответствует требованиями, то вы можете получить невнятную ошибку компиляции.
Ну можно написать документацию. Но компиляторы документацию не требуют. Получаем DocTyping без документа.
Тогда программисту сложно понять, что можно передать.
В ООП с этим проще. Вам передаётся какой-то конкретный объект A, вы можете посмотреть на его конкретную реализацию.
Более строгая типизация хороша для поиска ошибок и полезна для рефакторинга.

Мы решаем следующую задачу:
У нас есть ориентированный граф. Есть способы хранениня вершин: матрица смежности, список смежности.
В первом случае нам нужно n^2/8 памяти, в случае списка смежности нам нужно 4*(m+n). 
То есть если m>n^2/32, то выгодней хранить в матрице смежности. Ну, только по памяти.
А зачем привязываться к конкретной реализации? Ведь можно для одних вершин реализовать один способ, а для других - другой.
Для вершины будет хранится или bitset или incident vector. 
А может вообще будет хранить просто int? Ну, например, для функциональных графов. Или два числа?
То есть граф - это вектор списков инцидентности. Где список инцидентности бывает разным.
И внезапно, с помощью шаблонов очень неприятно и очень плохо такое дело реализовывать.
Так вот, на шаблонах тяжело реализовать вектор объектов, где могут хранится объекты разного типа.
Значит придётся реализовывать наследованием.

class LI{
    virtual size()
    virtual is_connected(int v)
    virtual get_incident_vertex(int i)
}
Тут же сталкиваемся с проблемой для 2 и 3 метода: никак не получается придумать, как быстро в каждом случае его исполнять. Обсудим позже.
Как сказать, что класс/метод абстрактен и его не нужно создавать?
class LI {
    virtual int size() = 0; // метод абстрактный.
}
Класс абстрактный, если у него есть хотя бы один абстрактный метод.
Если класс абстрактный, то нельзя сделать new LI
Некоторые методы могут быть не абстрактными - там может быть дефолтная реализация.
Если мы хотим абстрактный класс без абстрактных методов - помещаем конструктор в секцию protected.
Ну и опять же вспоминаем, что у виртуального класса должен быть виртуальный деструктор - боимся утечек памяти.
LI *x = new BSLI; delete x - вызовется деструктор базового класса.
Ну можно конечно не писать virtual, но это только если вы подписали кровью документ о том, что утечек у вас не будет.
Единственный плюс тогда: для вызова деструктора не идёт обращеие в таблицу виртуальных функций.

Давайте унаследуем что-нибудь.
class BSLI: public LI {
    BSLI(....) {} // вызовется базовый конструктор у LI
    BSLI(....): LI(...) // вызовется конкретный конструктор LI
    override ... () {} // переопределение метода
    ~BSLI(){} // вызываются все деструктора от сына в отцам, независимо от того, виртуальный деструктор он или нет
}

Как будет выглядеть граф? О
н будет хранить vector<unique_ptr<LI>>
Нужно реализовать не только способы хранения, но и возможность создавать новые способы.
Интерфейс для LI, таким образом, должен быть достаточно удобным.
Как конструировать граф?
Вроде решили, что граф будет статическим, то есть никаких рёбер и вершин в процессе работы добавляться не будет.
У графа есть конструктор от вектора unique_ptr от LI.


Пример переопределения базового класса типа хранения вершины:
class OneVLI: public LI {
    OneVLI(int v): v(v){}
    override int size() const {return 1;}
    override ... is_connected(int u) {return v == u}
    override ... get_incident_vertex(int i) { return v }
private:
    int v;
}

Например, хотим создать функциональный граф f(x)=(x+1)%3;
v<i_ptr<LI>> X;
x.emplace_back(new OneVLI(1));
x.emplace_back(new OneVLIE(2));
...(0));

Пока считаем, что доп. информации на рёбрах нет.
Внезапно: ещё один способ задания графа: k-ичная куча.
