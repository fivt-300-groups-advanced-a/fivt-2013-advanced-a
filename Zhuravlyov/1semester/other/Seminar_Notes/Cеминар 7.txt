Vector, map, set, multiset, multimap, unordered set, unordered map, 
::iterator – некий класс, который поддерживает указание на элемент контейнера.
Итераторы бывают разными
Forward Iterator – итератор, который идёт только вперед.
Поддерживаются iterator it;
It++;
++it;
*it;
Random Access Iterator – итератор произвольного доступа. Они есть только у std::array и std::vector
Может перемещаться на произвольное число шагов: it+=100;
Сортировка требует 2 Random Access Iterator’a.
Можно делать разность 2 итераторов it1-it2;
Bidirectional Iterator: как Forward только может --it;it--;
В set, map и т.д. – Bidirectional Iterator.
Инвалидация итераторов и указателей.
Если 2 указателя указывали на одно место, один заделитился, тогда по второму будет инвалидация.
Двойные указатели это плохо, т.к. на нижнем уровне будет происходить много новых операций.
В векторе после push_back и pop_back итераторы инвалидируются.
Классическая ошибка:
Class A
Int f() {
a.push_babck(a.size());
return a.size();
}
Int g(){
A[0]=f(); <-> (*a.begin()=f() ) – результат зависит от порядка вычисления операндов, если сначала вычислилась левая часть, то может произойти инвалидация)
}
Private:
V<int> a;
Так что Iterator у vector’a – опасная штука.
У set и map всё куда лучше – итераторы не инвалидируются просто так.
Set<int> s;
s.insert(7); - возвращает пару <iterator, bool>
s.erase(7) – инвалидирует итератор, возвращает bool.
Давайте напишем функцию.
Вычисление числа фибоначчи с кэшированием.
Map<int,int> cache;
Int f(int n) {
	If (n<2) return 1;
	Map<int,int>::iterator it=cache.find(n);
	If (it!=cache.end())
		Return it->second;
	Return cache[n]=f(n-2)+f(n-1);
}
Работает 2logN;
Лучше сделать: сache.insert(mp(n,0)); - будет logN

Итератор чаще всего реализуется в виде отдельного класса.
Class AIPtr {
}
Class A
{ 
Typedef AlPtr iterator;
}


Struct ValueReference{
BT *node;
T value;
}
Struct BT {
BT *p;
Vector <BT*> ch;
Unique_ptr<VR> value;
}
Обмен местами swap(A->value,B->value); swap(a->value->node, b->value->node);