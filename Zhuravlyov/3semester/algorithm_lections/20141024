R[s](v) - правый контекст подстроки v в строке s - множество строк, дополняющих данную подстроку для суффикса.

Лемма 1
Если для строк v, w R[s](v)=R[s](w) непустые, |v|<|w|, то v - суффикс w.

Лемма 2
Если v, w таковы, что |v|<|w| => R[s](v) >= R[s](w) и v - суффикс w или R[s](v)^R[s](w)=0 и v не суффикс w. (^ - пересечение)

Опр. Строка v лежит в одном классе эквивалентности с w, если их правые контексты совпадают.

Лемма 3
Пусть строка v - наидлиннейшая в своём классе эквивалентности, а u - наикратчайшая, тогда все строки класса эквивалетности будут суффиксами друг друга, от u до v.

Опр. Суффиксная ссылка v - наидлиннейший суффикс w, являющийся суффиксом v, такой, что их правые контексты не совпадают.
В реальности суффиксная ссылка ссылается на целый класс эквивалентности.

Лемма 4
Если строки v и w эквивалентны, то link(v)=link(w)

Лемма 5 - О перестроении правых контестов
Пусть мы добавляем к строке s символ a.
Тогда для любого v: R[sa](v) = R[v]a + возможно пустая трока, если v является суффиксом строки sa.

Лемма 6
Если z - наидлиннейший суффикс sa и z является подстрокой s.
Пусь v является суффиком sa и |v| > |z|
Тогда R[sa](v) = {пустая строка}

Теорема
Если z - наидленнейший суффикс sa, и z - подстрока s,
z' - наидлиннейшая, лежащаая в одном классе эквивалентности в z по s.
Тогда
1) Если v и u эквивалентны относительно s, v и z неэквивалентны относительно s, то v и u эквивалентны относительно sa.
2) Если v и z эквивалентны по s, то если |v| > |z|, то v и z' эквивалентны относительно sa, R[sa](v)=R[s](v)(a)
				 а если |v| <= |z|, то v и z эквивалентны по  sa, R[sa](v) = R(s)[v]a + eps

Обозначения:
Пусть A - автомат, A[v][a] - переход из класса эквивалентности v по символу a.
Пусть link[v] - суффиксная ссылка
Len[v] - длина наибольней строки в классе эквивалентности == длина наибольшей строки, ведущей в вершину v
T(v) - терминальная вершина
last

Алгоритм
1) Добавляем newLast, ребро из last в newlast
2) Идём по суффиксным ссылкам от s, пока не будет перехода по a,
  p=last
  for(;p!=null && A[p][u]==null; p=link[p] {
    A[p][a]=newLast;
  }
3) if (p==null)
    link[newLast]=begin;
   else
     if (len(q)==len(p)+1)
      link[newLast]=q
   else
    done <= рёбра q
    for (i=p; i!=null && A[i][q]==q;i = link[i])
      A[i][a] = clone
      
