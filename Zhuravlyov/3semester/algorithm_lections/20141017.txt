Говорим про ещё одну суффиксную структуру данных: суффиксный автомат.
У автомата есть множество состояний, переходов. Переход: функция из состояния и букве в некоторое другое состояние.
Множество терминальных вершин и стартовое состояние. 
Автомат из стартовой вершины проходит по буквам слова. Если мы оказаись в терминальной вершине, то автомат принял слово, иначе - нет.
Может быть, что из состояния v нет перехода по какой-то букве, тогда считается, что слово не принимается.
Автоматами, вообще говоря, задаются какие-то языки: множество слов, которые этим автоматом принимаются.

Хотим построить автомат, который задаёт все суффиксы данной строки. Этот автомат будет задавать конечное количество строк конечной длины.
Тогда автомат будет ациклическим.
Кстати, суффиксное дерево является суффиксным автоматом.
Рассмотрим суффиксное дерево, скажем, что все листья - терминальные вершины. Переходы - рёбра дерева. Тогда автомат принимает только суффиксы.
Но дело в том, что сжатый автомат - это не очень хорошо, а дерево - сжатое. 
Если мы все рёбра разберём по буквам, то у нас будет O(n^2) рёбер, что плохо.
Естественно, можно построить суффиксный автомат различными способами.

Мы будем строить суффиксный автомат с не очень большим числом вершин.
В суффиксном дереве, каждая вершина соответствует только одному суффиксу, этого хочется избежать.
Если несколько строк приходят в автомате в одну вершину, то дописывание каких-то строк в каждой из них может приводить к суффиксу
(если есть терминальные вершины после общей вершины)
Обозначим R(\alpha) - правый контекст строки \alpha - множество строк \beta, которые можно дописать к \alpha, что \alpha*\beta - суффикс s.
Если, например, строка s=abacaba, то R(a) = {\eps, bacaba, caba, ba}
R(b) = {acaba, a}, R(c) = {aba}, R(ab) = {acaba, a}
Заметим, что правым контектом является множество суффиксов исходной строки, поэтому будем вместо длинный слов писать номер суффикса.
Тогда правый контекст - позиции окончания конкретной строки в исходной строке s.
Утверждается, что множеств строк с одинаковым правым контекстом можно записать в одну вершину автомата.

Построим вручную суффиксный автомат для s=abaca
R(a) = {0, 2, 4}, R(b) = {1}, R(c) = {3}, R(ab)={1}, R(ba) = {2}, R(ac) = {3}, R(ca) = {4}, R(aba) = {2}
R(bac) = {3}, R(aca) = {4}, R(abac) = {3}, R(baca) = {4}
Стартовое состояние - правый контекст пустой строки, то есть все суффиксы.
S = {0, .. |s|}
Тогда у нас без стартового состояния 5 вершин: 024, 1, 2, 3, 4
Завершающие сосотояния: у которых в правый контекст входи длина строки - 1.
Остаётся определить можество переходов.
Нужно среди правого контекста мы должны оставить те позиции, после которых идёт искомый нами символ и прибавить к нему единицу.
Например, по букве (b): {0, 2, 4} -> {1}.
Переход по букве (с): {0, 2, 4} -> {3}
Можно просто ко всему контексту прибавить единицу, и посмотреть, какие буквы там стоят - по этим буквам и будут переходы.
Из стартовой: по (a) 024, по (b) 1, по (с) 3.

А строить мы будем так же, как в Укконене. Будем добавлять по одному символу в строку.
Если мы добавили ко всем строкам букву c. В вершине, которой соответствовала вся строка s должен быть новый переход.
Ужверждается, что если 2 строки оказались в одной вершине, то в исходной строки они заканчиватюся в одной позиции.
Стоки входящие в одну и ту же вершину являются суффиксами друг друга.
Если есть строки длины 5 и 10, которые входят в одну и ту же вршниу, то можно считать, что строки 9,8,7,6 входят туда же.
Здесь вершина сответсвует какому-то набору строк, которые являются суффиксами друг друга.

Дописыванием в правый контекст новую букву с учётом новых переходов.
Но кроме этого ещё к некоторым правым контектсам добавляется \eps.
То есть может произойти разделение вершин: у некоторых вершин происодт разбиение на 2 вершины.

Попробуем сформулировать алгоритм.
Когда приходит новая буква c, то произведём переходы по букве c.
Нам интересна следующая вершина, которая является суффиксом все строки s.
Суффиксная ссылка в суффиксном автомате - наибольший суффикс, который уже в отдельном состоянии. Мы научимся их пересчитывать.
Используем суффиксные ссылки.
Если перехода по букве c не было, то нужно провести ещё в новую вершину.
Идём по суффиксной ссылке дальше, много раз, пока перехода по букве c нет.
Если переход по букве c есть, то в строке s мы уже встречались с буквой с. Значит в след. вершине может возникнуть конф. ситуация.
Если мы продолжим переход по суффиксным ссылкам, то из них из всех бдет переход по букве c.
Если есть переход по символу c, то, возможно, вершина, в которую нужно произвести переход, нужно разделить на 2.
Пусть этой вершине v соостветствует некоторое количество строк, которые являются суффиксами друг друга.
Несколько разных строк соответствует одному правому контексту.
Если мы начали из стартовой вершины и пришли в вершину v, 
а потом перешли по символу c, то такие строки являются суффиксами новой строки с символом с.
Суффиксами новой строки являются только строки, которые соответсвуют новому маршруту.
