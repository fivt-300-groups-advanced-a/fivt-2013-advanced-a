#include <ctime>
#include <fstream>
#include <string>
#include <gtest/gtest.h>
#include "../../io/text_file_reader.h"
#include "../../io/text_file_writer.h"
#include "../../sort/sorter.h"
#include "../../sort/digital_sorter.h"
#include "../../sort/external_sorter.h"

/*
 * Integration test for ExternalSorter using Sorter
 * Test is generated by integration_test_text_small_generator.cpp 
 */

TEST(IntegrationTest, usingTextFilesSmall){
    long long sz = 0;
    std::string filename = "tests/integration_test_text_small.in";
    std::string result = "tests/integration_test_text_small.out";
    std::ifstream test_in(filename.c_str());
    std::vector<int> cnt(1000000);
    int cur;
    while (test_in >> cur){
        cnt[cur]++;
        sz++;
    }
    test_in.close();

    ExternalSorter<int, TextFileReader<int>, TextFileWriter<int>, 
        Sorter<int, std::less<int> >, std::less<int> >
            sorter(filename);
    sorter.setResultFile(result);
    sorter.sort();
    
    int last = -1;
    std::ifstream in(result.c_str());
    for (long long i = 0; i < sz; i++){
        int cur;
        ASSERT_TRUE(in >> cur);
        ASSERT_LE(last, cur);
        last = cur;
        cnt[cur]--;
        ASSERT_TRUE(cnt[cur] >= 0);
    }
    ASSERT_FALSE(in >> cur);
}

/*
 * Integration test for ExternalSorter using Sorter
 * Test is generated by integration_test_text_big_generator.cpp 
 */

TEST(IntegrationTest, usingTextFilesBig){
    long long sz = 0;
    std::string filename = "tests/integration_test_text_big.in";
    std::string result = "tests/integration_test_text_big.out";
    std::ifstream test_in(filename.c_str());
    std::vector<int> cnt(1000000);
    int cur;
    while (test_in >> cur){
        cnt[cur]++;
        sz++;
    }
    test_in.close();

    ExternalSorter<int, TextFileReader<int>, TextFileWriter<int>, 
        Sorter<int, std::less<int> >, std::less<int> >
            sorter(filename);
    sorter.setResultFile(result);
    sorter.sort();
    
    int last = -1;
    std::ifstream in(result.c_str());
    for (long long i = 0; i < sz; i++){
        int cur;
        ASSERT_TRUE(in >> cur);
        ASSERT_LE(last, cur);
        last = cur;
        cnt[cur]--;
        ASSERT_TRUE(cnt[cur] >= 0);
    }
    ASSERT_FALSE(in >> cur);
}

/*
 * Integration test for ExternalSorter using DigitalSorter
 * Test is generated by integration_test_text_small_generator.cpp 
 */

TEST(IntegrationTest, usingTextFilesSmallDigital){
    long long sz = 0;
    std::string filename = "tests/integration_test_text_small.in";
    std::string result = "tests/integration_test_text_small.out";
    std::ifstream test_in(filename.c_str());
    std::vector<int> cnt(1000000);
    int cur;
    while (test_in >> cur){
        cnt[cur]++;
        sz++;
    }
    test_in.close();

    ExternalSorter<int, TextFileReader<int>, TextFileWriter<int>, 
        DigitalSorter<int, IntegerDigitExtractor<int> >, std::less<int> >
            sorter(filename);
    sorter.setResultFile(result);
    sorter.sort();
    
    int last = -1;
    std::ifstream in(result.c_str());
    for (long long i = 0; i < sz; i++){
        int cur;
        ASSERT_TRUE(in >> cur);
        ASSERT_LE(last, cur);
        last = cur;
        cnt[cur]--;
        ASSERT_TRUE(cnt[cur] >= 0);
    }
    ASSERT_FALSE(in >> cur);
}

TEST(IntegrationTest, usingTextFilesBigDigital){
    long long sz = 0;
    std::string filename = "tests/integration_test_text_big.in";
    std::string result = "tests/integration_test_text_big.out";
    std::ifstream test_in(filename.c_str());
    std::vector<int> cnt(1000000);
    int cur;
    while (test_in >> cur){
        cnt[cur]++;
        sz++;
    }
    test_in.close();

    ExternalSorter<int, TextFileReader<int>, TextFileWriter<int>, 
        DigitalSorter<int, IntegerDigitExtractor<int> >, std::less<int> >
            sorter(filename);
    sorter.setResultFile(result);
    sorter.sort();
    
    int last = -1;
    std::ifstream in(result.c_str());
    for (long long i = 0; i < sz; i++){
        int cur;
        ASSERT_TRUE(in >> cur);
        ASSERT_LE(last, cur);
        last = cur;
        cnt[cur]--;
        ASSERT_TRUE(cnt[cur] >= 0);
    }
    ASSERT_FALSE(in >> cur);
}
