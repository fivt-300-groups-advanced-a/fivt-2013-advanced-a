////  main.cpp//  Graph////  Created by Алексей Подкин on 29.03.14.//  Copyright (c) 2014 Алексей Подкин. All rights reserved.//#include <iostream>#include "GraphStorage.h"#include <gtest/gtest.h>#include <time.h>#include <vector>#include <memory>TEST(GraphStorageTesting, BitSetMethod){    srand(42);    int number_of_tests = 10, t = 0;    while (t < number_of_tests)    {        std::vector <bool> matrix;        int number_of_verteces = rand() % 100 + 10;        matrix.resize(number_of_verteces);        for (int i = 0; i < number_of_verteces; i++)        {            matrix[i] = rand() % 2;        }        BitSetMethod list_of_incidents(matrix);        for (int i = 0; i < number_of_verteces; i++)        {            ASSERT_EQ(list_of_incidents.isConnected(i), matrix[i]);        }        t++;    }}TEST(GraphStorageTesting, StandartListMethod){    srand(42);    int number_of_tests = 10, t = 0;    while (t < number_of_tests)    {        std::vector <int> matrix;        std::vector <bool> bit_set;        int number_of_verteces = rand() % 100 + 10, number_of_incident_verteces = number_of_verteces / 2;        matrix.resize(number_of_incident_verteces);        bit_set.resize(number_of_verteces, 0);        for (int i = 0; i < number_of_incident_verteces; i++)        {            matrix[i] = rand() % number_of_verteces;            bit_set[matrix[i]] = 1;        }        StandartListMethod list_of_incidents = StandartListMethod(matrix, 0);        for (int i = 0; i < number_of_verteces; i++)        {            ASSERT_EQ(list_of_incidents.isConnected(i), bit_set[i]);        }        t++;    }}int main(int argc, char ** argv){    ::testing::InitGoogleTest(&argc, argv);    return RUN_ALL_TESTS();}