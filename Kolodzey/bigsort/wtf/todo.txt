
 <план 1>
Ура-ура-ура, я поняла структуру проекта!!! В связи с этим план меняется :)
1. Написать в source простенький код
2. Написать в sample простенький код
3. Собрать примитивный проект пользователя библиотеки (ну то есть соль в написании makefile в папке sample)
4. Написать примитивный тест
5. Собрать и запустить примитивный тест (написать makefile для сборки тестов)
6. Написать документацию в source и скомпилировать его doxygenом
7. написать makefile для компиляции документации? Хотя зачем, вроде как у доксигена свои настройки… подумать короче, над сборкой и обновлением документации
8. Аккуратно гитом добавить все папки и нужные файлы. Мб, сделать это уже сейчас? Хотя надо понять, что из gtest мне нафиг нужно для поддержания жизнеспособности проекта. Ну и плюс, может нафиг гиту бинарники? Ну то есть да, они нужны для ускорения сборки, но на самом-то деле, ну потрачу я пять минут вместо одной, пересобирая проект с разных ноутов… и чо?
9. Начать писать сортировку во внешней памяти :)
</план 1>

 <план 0>
1. Разобраться со сборкой пакетов
1.1 Создать пробный проект из нескольких файлов
1.2 прикрутить make
1.3 поиграться с make install

2. Разобраться с google test
2.1 Вкурить документацию
2.2 Установить
2.3 Подружить с make?

3. Чтение больших файлов
3.1 Сгенерировать хрень гигабайт на 8.
3.2 Считать хрень гигабайт на 8 и вывести.
3.3 Поверить, что я умею работать с файлами, которые не влазят в оперативку.

4.1 Написать чтение и сортировку файла на 8 гб из int.
4.2 Оттестить эту хрень
4.3 Придумать, как сделать из этого устанавливаемое консольное приложение, которое на вход принимает файл, который надо отсортить и файл, куда надо вывести

5. Разделение логики
Разделить код на библиотеку, содержащую мою функцию сортировки (в идеале, исходный код не поставляется, токма бинарник :) и пользовательское приложение, к которому компилируются файлы, содержащие компараторы и ридеры (нарисовать логику сборки), причём вот это вот приложение берёт и использует библиотеку с функцией сортировки
Прикручивание документации? Doxygen?

На этом этапе я окончательно понимаю, что и как я пишу, а не просто пробую инструменты

6. Улучшение функционала сортировки
6.1 Переписать функцию сортировки на templatax
6.2 Реализовать нестандартный ввод-вывод
6.3 Реализовать варианты сортировки блоков
6.4 … Подробный план пункта 6 сделать, когда разберёшься с пунктом 5

7. Улучшение функционала консольного приложения. Идеальный результат = пакет, с установщиком консольного приложения ну и библиотечка с нашей функцией. И документация к этому всему скомпонованная.
</конец плана 0>

Полезные ссылки:
Документация git
http://git-scm.com/documentation

Чуть-чуть про make
http://wideserver.ru/sredstva-razrabotki/komanda-i-fayli.html
http://www.linux.org.ru/books/make.html
Годный мануал http://linux.yaroslavl.ru/docs/prog/gnu_make_3-79_russian_manual.html

Картинка про файлы .o
http://podelise.ru/tw_files2/urls_202/1/d-719/7z-docs/1_html_m2fe3dd4a.jpg

Библиотека тупого художника как пример библиотеки и использования doxygen
https://code.google.com/p/txlib/source/browse/TXLib.h

Собственно, документация doxygen
http://www.stack.nl/~dimitri/doxygen/manual/index.html