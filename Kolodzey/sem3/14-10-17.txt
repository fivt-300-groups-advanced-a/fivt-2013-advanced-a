meeteng notes 17.10.2014
========================

Даша
----

Ну, написана страница play.html

Дима Иващенко
-------------

+ перенёс репозиторий в организацию
  - вступите в организацию
  - перенастройте свой гит

+ сделал второй репозиторий
  - залили с Лёшей туда определения

+ написал интерфейс какого-то абстрактного ресурса

- проблема с двумя репозиториями
  + непонятно как распределить данные, чтоб не было дублирования кода
  + об этом есть большой разговор в trello

ЛЖ: сейчас у нас две версии lang_utils

ВБ: с делением репозиториев нужно просто принять решение. Что у вас сейчас в итоге?

ИВ: Самым логичным решением сейчас кажется перенос всего модуля explanation во второй репозиторий, а также преобразования второго репозитория в устанавливаемый пакет (про создание пакета расскажет Фёдор). И иметь скрипт, который собирает пакет.

ВБ: Добавьте в этот скрипт sanity-check.

ИВ: Может, стоит поискать аналог pymorphy не для python, а для c++, чтобы словари собирались не полчаса, а пару минут.

- проблема со сборкой
  + хочется разделить на этапы, хочется шлак отделять быстро, а не питоном

ВБ: Мне кажется проблема получасовой обработки данных надуманной. Если проблема только в pymorpy, то сделайте предобработку, добавив в словарь нужные данные от pymophy. Если есть долгая операция, то постарайтесь использовать её реже. Если хотите отлаживаться, нефиг это делать на полном словаре.

ВБ: Но идея предобрабатывающих утилит — хорошая. Хотелось бы уметь предобрабатывать тексты, например находить подозрительные вещи и уметь их удалять.

ВБ: В общем, ускорение сборки — не главный приоритет.

Лёша Журавлёв
-------------

Пытался бороться с плохоими синонимами.

Стал искать словарь получше. То, что у нас было — словарь Абрамова 1890 года.
Попытался найти словарь в более сыром виде --- оказалось, что словарь не очень хорошо распаршен.

Нашёл словарь на синонимс.ру, ну, я распарсил этот сайт, скрипт отработал 
4 часа. Есть в этом словаре, правда, и города, и нецензурные слова.

Нашёл на этом же сайте ссылку на антоним.онлайн, там такой же формат, ну я и его распарсил тоже.

Фёдор Алексеев
--------------

Мы хотим сделать репозиторий данных устанавливаемым пакетом.
Оказывается, это просто.

Я начал что-то делать с универсальным ключом, который общий для всех объяснений. Пока сделал класс.

Я немножко подёргал базу данных на сервере. Хочу собирать статистику в базу данных на сервере.

ВБ: А сейчас как?

ФА: Вся статистика в оперативке, дампается каждые 10 запросов.

Тимур
-----

У нас есть новый source, кроссворды. Там была проблема с именами собственными. Ну, в общем, часов 5 я сидел.

ЛЖ: Есть проблема, что в словаре много редких слов, они выдаются пользователю, он не угадывает, скучает.

Давайте в репозиторий запилим список самых частых слов, чтобы можно было выдавать пользователю не очень редкое слово.

Лёша Подкин
-----------
ФА: Ну, он сам делает приложение, мы пишем ему фич-реквесты, он их выполняет. Т. е. Лёша работает самостоятельно, его это устраивает.

ИВ: У нас какая-то боль с кодировками на сервере, он упал.

Макс Русак
----------
Я к следующей, я не смог.

ВБ: на следующей некому 

Итак, задания
-------------

+ explanator interface
  - get_known_word -> источник частотности, интерфейс к источнику
  - all-explanations
+ копка «объясни по-другому» в приложении и java-script
+ возможность оценивания

+ проблема двух репозиториев:
  + перенос explanations, lang_utils,
  + запилить возможность установки
  + sanity-check

+ нужна система фильтрации некорректных объяснений
  - возможно прикрутить систему регистрации

+ обработка статистики

+ база данных на сервере

О, раз мы отделили lang-utils от сервера, может сервер уже и на appEngine перенести?

О, а digital ocean можно использовать!

+ Добавить объяснение по частям
+ Добавить источник по созвучиям
+ О, кажется нужно уметь объяснять не только имена собственные

+ фич-реквест: кнопка заткнись для  голоса.

Продукшион цели: давайте сконцентрируемся на обработке данных
-------------------------------------------------------------

Важно удалить полный трэш.
- интерфейс очистки словаря:
 + back office
 + ручная плюс программная
нужнен интерфейс вставки функций отсечки + простой способ смотреть, на что это влияет.

ВБ: кто может рассказать мне процесс парсинга данных, как сейчас?

ИВ: расскажу, как у меня
+ есть row_data --- словарь ожегова в пяти томах
+ есть definitions_parser, он читает row_data, для каждой статьи есть ряд проверок
  - проверить, что название статьи --- хорошее слово
  - рапарсить аббревиатуры
  - выпарсить однокоренные ---
+ создаётся экземпляр класса FileResourse, в нём вызывается метод add_entry
+ из FileResourse создаётся txt с готовым словарём
+ словарь  отправляется в облако
+ словарь попает в репозиторий с помощью специального скрипта

ВБ: проблема в том, что сейчас почти невозможно ничего отлаживать, сложно отслеживать и вставлять промежуточные шаги.

Давайте в этот процесс добавим ещё несколько задач.

1) diff-утилита
2) возможность добавлять преобразования
3) возможность отладки статьи

ВБ: можно я попробую описать интерфейс?

row
 |
 v
[title (слово/слова которые объясняются)][объяснение] Базовый класс объяснения
 |
 |
 | modifications --- модуль, который применяет список функций, которые
 |                   получают одно объяснение и возвращают другое объяснение
 |                   
 |                   
 v
[...]

Польза от такого варианта классная, можно юниттестить, можно по выданному объяснению его оригинал выдавать.

Удаление слова по black-list --- это тоже функция.

ВБ: Идея оптимизировать память для фразеологизмов --- не очень хороша, важнее сделать общий интерфейс.

Итак, давайте выпишем задачи:
 1) class RawArticle -> в себя -> в базу данных
 2) модуль Modifiers туда перенести функции проверки
 3) переписать парсеры с новым интерфейсом Modifiers
 4) утилита diff(parser, список функций, список функций)
 5) утилита getevolution(RawArticle, список функций)

ВБ: нужно сделать perfomance-review к моему возвращению.